{"kind":"article","seeAlsoSections":[{"title":"Documentation Content","identifiers":["doc:\/\/org.swift.docc\/documentation\/docc\/adding-supplemental-content-to-a-documentation-catalog","doc:\/\/org.swift.docc\/documentation\/docc\/linking-to-symbols-and-other-content","doc:\/\/org.swift.docc\/documentation\/docc\/documenting-api-with-different-language-representations"],"anchor":"Documentation-Content","generated":true}],"metadata":{"title":"Writing Symbol Documentation in Your Source Files","modules":[{"name":"DocC"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Add reference documentation to your symbols that explains how to use them."}],"sections":[],"variants":[{"paths":["\/documentation\/docc\/writing-symbol-documentation-in-your-source-files"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.docc\/documentation\/docc"]]},"identifier":{"url":"doc:\/\/org.swift.docc\/documentation\/docc\/writing-symbol-documentation-in-your-source-files","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A common characteristic of a well-crafted API is that it’s easy to read and"},{"type":"text","text":" "},{"type":"text","text":"practically self-documenting. However, an API alone can’t convey important"},{"type":"text","text":" "},{"type":"text","text":"information like clear documentation does, such as:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The overall architecture of a framework or package","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Relationships and dependencies between components in the API","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Boundary conditions, side effects, and errors that occur when using the API","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"For example, DocC generates an entry in the documentation for the following"},{"type":"text","text":" "},{"type":"text","text":"method, but it doesn’t convey any details about what happens when you call the"},{"type":"text","text":" "},{"type":"text","text":"method, or whether there are any limits on the values you pass to it:"}],"type":"paragraph"},{"code":["\/\/ Eat the provided specialty sloth food.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {","    ...","}"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"inlineContent":[{"text":"To help the people who use your API have a better understanding of it, follow the steps in the sections below to","type":"text"},{"text":" ","type":"text"},{"text":"add documentation comments to the public symbols in your project. DocC compiles","type":"text"},{"text":" ","type":"text"},{"text":"those comments and generates formatted documentation that you share with your users.","type":"text"}],"type":"paragraph"},{"text":"Add a Basic Description for Each Symbol","type":"heading","anchor":"Add-a-Basic-Description-for-Each-Symbol","level":3},{"inlineContent":[{"text":"The first step toward writing great documentation is to add single-sentence abstracts or summaries, and","type":"text"},{"text":" ","type":"text"},{"text":"where necessary, ","type":"text"},{"inlineContent":[{"text":"Discussion","type":"text"}],"type":"emphasis"},{"text":" sections, or additional details about a symbol and its use, to each of your framework’s public","type":"text"},{"text":" ","type":"text"},{"text":"symbols. Discussion sections are areas in documentation that provide additional detail about a symbol and its usage.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A summary describes a symbol and augments its name with additional","type":"text"},{"text":" ","type":"text"},{"text":"details. Try to keep summaries short and precise; use a single sentence or","type":"text"},{"text":" ","type":"text"},{"text":"sentence fragment that’s ideally 150 characters or fewer. Use plain text, and","type":"text"},{"text":" ","type":"text"},{"text":"avoid including links, technical terms, or other symbol names. Summaries appear in the documentation pages that DocC generates.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If a symbol already has a source comment that begins with two forward slashes","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"\/\/"},{"text":"), insert an additional forward slash (","type":"text"},{"type":"codeVoice","code":"\/"},{"text":") to convert it to a","type":"text"},{"text":" ","type":"text"},{"text":"documentation comment. DocC uses the first line of a documentation comment as","type":"text"},{"text":" ","type":"text"},{"text":"the summary.","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ Eat the provided specialty sloth food.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"style":"tip","type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"DocC also supports multiline documentation comments. Begin a comment","type":"text"},{"text":" ","type":"text"},{"text":"with a forward slash and two asterisks (","type":"text"},{"type":"codeVoice","code":"\/**"},{"text":"), and terminate it with an asterisk","type":"text"},{"text":" ","type":"text"},{"text":"and a forward slash (","type":"text"},{"type":"codeVoice","code":"*\/"},{"text":"). Content you add in between becomes the","type":"text"},{"text":" ","type":"text"},{"text":"documentation.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"When you need to provide additional content for a symbol, add one"},{"type":"text","text":" "},{"type":"text","text":"or more paragraphs directly below a symbol’s summary to create a Discussion"},{"type":"text","text":" "},{"type":"text","text":"section. The content you include depends on the type of symbol you’re"},{"type":"text","text":" "},{"type":"text","text":"documenting:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"For a property, explain how it affects the behavior of its parent."},{"type":"text","text":" "},{"type":"text","text":"Describe typical usage and any permitted or default values."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"For a method, describe its usage patterns and any side effects or additional"},{"type":"text","text":" "},{"type":"text","text":"behaviors. Highlight whether the method executes asynchronously or performs any"},{"type":"text","text":" "},{"type":"text","text":"expensive operations."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"For an enumeration case or constant, concisely describe what it represents.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Insert blank lines to break text into separate paragraphs."}],"type":"paragraph"},{"code":["\/\/\/ Eat the provided specialty sloth food.","\/\/\/","\/\/\/ Sloths love to eat while they move very slowly through their rainforest ","\/\/\/ habitats. They are especially happy to consume leaves and twigs, which they ","\/\/\/ digest over long periods of time, mostly while they sleep.","\/\/\/ ","\/\/\/ When they eat food, a sloth's `energyLevel` increases by the food's `energy`.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"inlineContent":[{"type":"text","text":"Any paragraphs you add appear below the Discussion header in the symbol"},{"type":"text","text":" "},{"type":"text","text":"reference page that DocC generates."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When writing content for a Discussion section, use documentation markup. For"},{"type":"text","text":" "},{"type":"text","text":"more information, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/formatting-your-documentation-content","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Describe the Parameters of a Method","type":"heading","anchor":"Describe-the-Parameters-of-a-Method","level":3},{"inlineContent":[{"type":"text","text":"For methods that take parameters, document those parameters directly below the"},{"type":"text","text":" "},{"type":"text","text":"summary, or the Discussion section, if you include one. Describe each parameter"},{"type":"text","text":" "},{"type":"text","text":"in isolation. Discuss its purpose and, where necessary, the range of acceptable"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"},{"inlineContent":[{"text":"DocC supports two approaches for documenting the parameters of a","type":"text"},{"text":" ","type":"text"},{"text":"method. You can add a Parameters section, or one or more parameter fields.","type":"text"},{"text":" ","type":"text"},{"text":"Both use Markdown’s list syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A Parameters section begins with a single list item that contains the","type":"text"},{"text":" ","type":"text"},{"code":"Parameters","type":"codeVoice"},{"text":" keyword and terminates with a colon (","type":"text"},{"code":":","type":"codeVoice"},{"text":"). Individual parameters","type":"text"},{"text":" ","type":"text"},{"text":"appear as nested list items. A colon separates a parameter’s name from its","type":"text"},{"text":" ","type":"text"},{"text":"description.","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ - Parameters:","\/\/\/   - food: The food for the sloth to eat.","\/\/\/   - quantity: The quantity of the food for the sloth to eat.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"inlineContent":[{"text":"Parameter fields omit the parent list item and include the ","type":"text"},{"code":"Parameter","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"keyword in each of the individual list items, between the list item marker and","type":"text"},{"text":" ","type":"text"},{"text":"the name of the parameter.","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ - Parameter food: The food for the sloth to eat.","\/\/\/ - Parameter quantity: The quantity of the food for the sloth to eat.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"inlineContent":[{"text":"After you add documentation for a methods parameters, preview it in a web browser to see the rendered content.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"3_eat","type":"image"}],"type":"paragraph"},{"text":"Describe the Return Value of a Method","type":"heading","anchor":"Describe-the-Return-Value-of-a-Method","level":3},{"inlineContent":[{"type":"text","text":"For methods that return a value, include a Returns section in your"},{"type":"text","text":" "},{"type":"text","text":"documentation comment to describe the returned value. If"},{"type":"text","text":" "},{"type":"text","text":"the return value is optional, provide information about when the method"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"There are no restrictions for where you add the Returns section in a","type":"text"},{"text":" ","type":"text"},{"text":"documentation comment, other than it must come after the summary, and the","type":"text"},{"text":" ","type":"text"},{"text":"Discussion section, if you include one.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A Returns section contains a single list item that includes the ","type":"text"},{"type":"codeVoice","code":"Returns"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"keyword. The description of the return value follows the colon (","type":"text"},{"type":"codeVoice","code":":"},{"text":").","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ - Returns: The sloth's energy level after eating.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"DocC supports a single Returns section. Including more than one section results in"},{"type":"text","text":" "},{"type":"text","text":"undefined behavior."}],"type":"paragraph"}]},{"text":"Describe the Thrown Errors of a Method","type":"heading","anchor":"Describe-the-Thrown-Errors-of-a-Method","level":3},{"inlineContent":[{"type":"text","text":"If a method can throw an error, add a Throws section to your documentation"},{"type":"text","text":" "},{"type":"text","text":"comment. Explain the circumstances that cause the method to throw an error, and"},{"type":"text","text":" "},{"type":"text","text":"list the types of possible errors."}],"type":"paragraph"},{"inlineContent":[{"text":"Similar to a Returns section, there are no restrictions for where you add a","type":"text"},{"text":" ","type":"text"},{"text":"Throws section, other than it must come after the summary, and the Discussion","type":"text"},{"text":" ","type":"text"},{"text":"section, if you include one.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A Throws section contains a single list item that includes the ","type":"text"},{"code":"Throws","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"keyword. Add the content that describes the errors after the colon (:).","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ - Throws: `SlothError.tooMuchFood` if the quantity is more than 100.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"DocC supports a single Throws section. Including more than one section results in"},{"type":"text","text":" "},{"type":"text","text":"undefined behavior."}]}]},{"text":"Create a Richer Experience for Your Symbol Documentation","type":"heading","anchor":"Create-a-Richer-Experience-for-Your-Symbol-Documentation","level":3},{"inlineContent":[{"text":"A documentation comment that includes each of the previously mentioned sections provides much more information to developers than a single-line source comment, as the following example shows:","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ Eat the provided specialty sloth food.","\/\/\/","\/\/\/ Sloths love to eat while they move very slowly through their rainforest ","\/\/\/ habitats. They're especially happy to consume leaves and twigs, which they ","\/\/\/ digest over long periods of time, mostly while they sleep.","\/\/\/","\/\/\/ When they eat food, a sloth's `energyLevel` increases by the food's `energy`.","\/\/\/","\/\/\/ - Parameters:","\/\/\/   - food: The food for the sloth to eat.","\/\/\/   - quantity: The quantity of the food for the sloth to eat.","\/\/\/","\/\/\/ - Returns: The sloth's energy level after eating.","\/\/\/","\/\/\/ - Throws: `SlothError.tooMuchFood` if the quantity is more than 100.","mutating public func eat(_ food: Food, quantity: Int) throws -> Int {"],"syntax":"swift","type":"codeListing","wrap":100,"copyToClipboard":true,"highlight":[]},{"inlineContent":[{"text":"In addition, DocC includes features that allow you to create even richer","type":"text"},{"text":" ","type":"text"},{"text":"documentation for your symbols:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use symbol links instead of code voice when referring to other symbols in"},{"type":"text","text":" "},{"type":"text","text":"your project. Symbol links allow you to quickly navigate your project’s"},{"type":"text","text":" "},{"type":"text","text":"documentation when viewing in a browser. For more information, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/formatting-your-documentation-content","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use extension files to provide additional content for your symbols, such as","type":"text"},{"text":" ","type":"text"},{"text":"code examples and images, and to help keep the size of their in-source comments","type":"text"},{"text":" ","type":"text"},{"text":"manageable. For more information, see","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/adding-supplemental-content-to-a-documentation-catalog","isActive":true},{"text":".","type":"text"}]}]}]}],"kind":"content"}],"references":{"doc://org.swift.docc/documentation/docc/formatting-your-documentation-content":{"type":"topic","role":"article","identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/formatting-your-documentation-content","url":"\/documentation\/docc\/formatting-your-documentation-content","title":"Formatting Your Documentation Content","abstract":[{"type":"text","text":"Enhance your content’s presentation with special formatting and styling for text and lists."}],"kind":"article"},"doc://org.swift.docc/documentation/docc/documenting-api-with-different-language-representations":{"identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/documenting-api-with-different-language-representations","abstract":[{"type":"text","text":"Create documentation for API that’s callable from more than one source language."}],"kind":"article","title":"Documenting API with Different Language Representations","type":"topic","role":"article","url":"\/documentation\/docc\/documenting-api-with-different-language-representations"},"3_eat":{"alt":"A screenshot showing the rendered documentation for the eat(_:quantity:) method.","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.docc\/3_eat@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.docc\/3_eat~dark@2x.png"}],"type":"image","identifier":"3_eat"},"doc://org.swift.docc/documentation/docc/linking-to-symbols-and-other-content":{"url":"\/documentation\/docc\/linking-to-symbols-and-other-content","kind":"article","role":"article","abstract":[{"type":"text","text":"Facilitate navigation between pages using links."}],"title":"Linking to Symbols and Other Content","identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/linking-to-symbols-and-other-content","type":"topic"},"doc://org.swift.docc/documentation/docc":{"identifier":"doc:\/\/org.swift.docc\/documentation\/docc","type":"topic","title":"DocC","url":"\/documentation\/docc","abstract":[{"type":"text","text":"Produce rich API reference documentation and interactive tutorials for your Swift framework or package."}],"kind":"symbol","role":"collection"},"doc://org.swift.docc/documentation/docc/adding-supplemental-content-to-a-documentation-catalog":{"url":"\/documentation\/docc\/adding-supplemental-content-to-a-documentation-catalog","role":"article","identifier":"doc:\/\/org.swift.docc\/documentation\/docc\/adding-supplemental-content-to-a-documentation-catalog","abstract":[{"text":"Include articles and extension files to extend your source documentation comments or provide supporting conceptual content.","type":"text"}],"kind":"article","title":"Adding Supplemental Content to a Documentation Catalog","type":"topic"}}}